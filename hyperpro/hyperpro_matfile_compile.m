% hyperpro_matfile_compile.m - Compile HyperPro data from *.mat files
%
% Syntax: hyperpro_matfile_compile.m
%
% Inputs:
%    1) Folder location with HyperPro *L2.mat files processed using Prosoft
%    2) Spreadsheet with metadata information (e.g., 'GC#_hyperpro_list.xlsx')
%        created using hyperpro_matfile_compile.m with added station info
%
% Outputs:
%    output - 'GC#_all_hyperpro.mat' file for cruise with compiled HyperPro data
%   
% MAT-files required: '*L2.mat' (Generated by Prosoft)
%
% Author: Steven E. Lohrenz, Ph.D., biological oceanography
% School for Marine Science and Technology, University of Massachusetts Dartmouth
% email address: slohrenz@umassd.edu
% Website: http://www.umassd.edu/smast/
% Last revision: 29 June 2025 

%% ------------- BEGIN CODE --------------%% 

clc

% For batch processing, commment statement out below
% icr = 5;

crz = ['GC',num2str(icr)];
    
    switch crz
        % inputfolder='C:\Users\slohrenz\OneDrive - UMASS Dartmouth\Documents\Steve\DATA\NSF\GulfCarbon\GC_hypersensor_data\Gulf Carbon 1\Hyperpro_Data\';
        case 'GC2'
            inputfolder = 'C:\Users\slohrenz\OneDrive - UMASS Dartmouth\Documents\Steve\DATA\NSF\GulfCarbon\GC_hypersensor_data\GC2_Hyper_sensors\GC2_hyperPro_data\';
        case 'GC3'
            inputfolder='C:\Users\slohrenz\OneDrive - UMASS Dartmouth\Documents\Steve\DATA\NSF\GulfCarbon\GC_hypersensor_data\GC3_hypersensors\HyperPro_GC3\';
        case 'GC4'
            inputfolder='C:\Users\slohrenz\OneDrive - UMASS Dartmouth\Documents\Steve\DATA\NSF\GulfCarbon\GC_hypersensor_data\GC4_hyper\HyperPro_data_GC4\';
        case 'GC5'
            inputfolder='C:\Users\slohrenz\OneDrive - UMASS Dartmouth\Documents\Steve\DATA\NSF\GulfCarbon\GC_hypersensor_data\GC5_hyperPro\';
    end

% Text string for file naming
cruise_txt = crz;

sheet_name = ['Spreadsheet/',cruise_txt,'_hyperpro_list.xlsx'];

%Get list of files
file_lst=dir([inputfolder,'Mat Files\*L2.mat']);
[filen,m]=size(file_lst);

%Create structured variable for data
hyperpro_struct=struct('attributes',{},'ed',{},'lu',{},'mpr',{},'edd',{},'ldd',{},'es',{},...
    'esd',{});

%Get metadata
hpro_meta=readtable([inputfolder,sheet_name],'VariableNamingRule','modify');

for nfile=1:filen
    
    % Load data
    input_file=file_lst(nfile).name;
    input_file=char(input_file);
    labeltext=cellstr(input_file(1:2));
    filepath=[char(inputfolder),'Mat Files\',input_file];

    disp(['Reading ',filepath]);

    % Get file information
    matfile_info=load(filepath);
    
    hdfdata=matfile_info.hdfdata;
    calfile={hdfdata.calfile};
    file_name=hdfdata(1).file_name;
    file_prefx=strrep(file_name,'_L2.hdf','');
        
    % Find indices for different sensors
    ed_indx=strcmp({hdfdata.calfile},'HPE252B.cal');
    lu_indx=strcmp({hdfdata.calfile},'HPL218B.cal');
    mpr_indx=strcmp({hdfdata.calfile},'MPR093a.cal');
    edd_indx=strcmp({hdfdata.calfile},'PED252B.cal');
    lud_indx=strcmp({hdfdata.calfile},'PLD218B.cal');
    esd_indx=strcmp({hdfdata.calfile},'HED253B.cal');
    eu1_indx=strcmp({hdfdata.calfile},'HPE252B_Eu.cal');
    eu2_indx=strcmp({hdfdata.calfile},'HPE337a.cal');
    es_indx=strcmp({hdfdata.calfile},'HSE253B.cal');  %This may be incorrect
    eu1d_indx=strcmp({hdfdata.calfile},'PED252B_Eu.cal');
    eu2d_indx=strcmp({hdfdata.calfile},'PED337a.cal');

    % Assign metadata to profile
    % Find index matching file prefix
    m_indx=contains(hpro_meta.RawFile,file_prefx);
    
    lat=hpro_meta.Lat(m_indx);
    lon=hpro_meta.Lon(m_indx);
    date_time=datetime(hpro_meta.UTCDate(m_indx));
    station_id=hpro_meta.Station(m_indx);
    group_id=hpro_meta.Group(m_indx);
    pres_tare=hpro_meta.PresTare(m_indx);

    % Gather variable data
    ed_lambda=hdfdata(ed_indx).ED_wavelengths;
    ed=hdfdata(ed_indx).ED_data;
    ed_timer=hdfdata(ed_indx).TIMER_data;
    ed_timetag=hdfdata(ed_indx).TIMETAG2_data;
    ed_datetag=hdfdata(ed_indx).DATETAG_data;
    
    lu_lambda=hdfdata(lu_indx).LU_wavelengths;
    lu=hdfdata(lu_indx).LU_data;
    lu_timer=hdfdata(lu_indx).TIMER_data;
    lu_timetag=hdfdata(lu_indx).TIMETAG2_data;
    lu_datetag=hdfdata(lu_indx).DATETAG_data;

    pres=hdfdata(mpr_indx).Pres_data;
    pres_timer=hdfdata(mpr_indx).TIMER_data;
    vel=hdfdata(mpr_indx).VELOCITY_data;
    tilt=hdfdata(mpr_indx).ABS_TILT_data;
    pres_timetag=hdfdata(mpr_indx).TIMETAG2_data;
    pres_datetag=hdfdata(mpr_indx).DATETAG_data;

    if any(edd_indx)
        edd_lambda=hdfdata(edd_indx).ED_wavelengths;
        edd=hdfdata(edd_indx).ED_data;
        edd_timer=hdfdata(edd_indx).TIMER_data;
        edd_timetag=hdfdata(edd_indx).TIMETAG2_data;
        edd_datetag=hdfdata(edd_indx).DATETAG_data;
    end
    
    if any(lud_indx)
        lud_lambda=hdfdata(lud_indx).LU_wavelengths;
        lud=hdfdata(lud_indx).LU_data;
        lud_timer=hdfdata(lud_indx).TIMER_data;
        lud_timetag=hdfdata(lud_indx).TIMETAG2_data;
        lud_datetag=hdfdata(lud_indx).DATETAG_data;
    end
    
    es_lambda=hdfdata(es_indx).ES_wavelengths;
    es=hdfdata(es_indx).ES_data;
    es_timer=hdfdata(es_indx).TIMER_data;
    es_timetag=hdfdata(es_indx).TIMETAG2_data;
    es_datetag=hdfdata(es_indx).DATETAG_data;

    esd_lambda=hdfdata(esd_indx).ES_wavelengths;
    esd=hdfdata(esd_indx).ES_data;
    esd_timer=hdfdata(esd_indx).TIMER_data;
    esd_timetag=hdfdata(esd_indx).TIMETAG2_data;
    esd_datetag=hdfdata(esd_indx).DATETAG_data;

    eu1_lambda=hdfdata(eu1_indx).EU_wavelengths;
    eu1=hdfdata(eu1_indx).EU_data;
    eu1_timer=hdfdata(eu1_indx).TIMER_data;
    eu1_timetag=hdfdata(eu1_indx).TIMETAG2_data;
    eu1_datetag=hdfdata(eu1_indx).DATETAG_data;

    if any(eu1d_indx)
        eu1d_lambda=hdfdata(eu1d_indx).EU_wavelengths;
        eu1d=hdfdata(eu1d_indx).EU_data;
        eu1d_timer=hdfdata(eu1d_indx).TIMER_data;
        eu1d_timetag=hdfdata(eu1d_indx).TIMETAG2_data;
        eu1d_datetag=hdfdata(eu1d_indx).DATETAG_data;
    end
    
    if any(eu2_indx)
        eu2_lambda=hdfdata(eu2_indx).EU_wavelengths;
        eu2=hdfdata(eu2_indx).EU_data;
        eu2_timer=hdfdata(eu2_indx).TIMER_data;
        eu2_timetag=hdfdata(eu2_indx).TIMETAG2_data;
        eu2_datetag=hdfdata(eu2_indx).DATETAG_data;
    end

    if any(eu2d_indx)
        eu2d_lambda=hdfdata(eu2d_indx).EU_wavelengths;
        eu2d=hdfdata(eu2d_indx).EU_data;
        eu2d_timer=hdfdata(eu2d_indx).TIMER_data;
        eu2d_timetag=hdfdata(eu2d_indx).TIMETAG2_data;
        eu2d_datetag=hdfdata(eu2d_indx).DATETAG_data;
    end
    
    %Assemble variable data in structured array
    hyperpro_struct(nfile).attributes.date=date_time;
    hyperpro_struct(nfile).attributes.lat=lat;
    hyperpro_struct(nfile).attributes.lon=lon;
    hyperpro_struct(nfile).attributes.station_id=station_id;
    hyperpro_struct(nfile).attributes.group_id=group_id;
    hyperpro_struct(nfile).attributes.pres_tare=pres_tare;
    hyperpro_struct(nfile).attributes.input_file={input_file};
   
    hyperpro_struct(nfile).ed.lambda=ed_lambda;
    hyperpro_struct(nfile).ed.data=ed;
    hyperpro_struct(nfile).ed.timer=ed_timer;
    hyperpro_struct(nfile).ed.time=ed_timetag;
    hyperpro_struct(nfile).ed.date=ed_datetag;
    
    hyperpro_struct(nfile).lu.lambda=lu_lambda;
    hyperpro_struct(nfile).lu.data=lu;
    hyperpro_struct(nfile).lu.timer=lu_timer;
    hyperpro_struct(nfile).lu.time=lu_timetag;
    hyperpro_struct(nfile).lu.date=lu_datetag;

    hyperpro_struct(nfile).mpr.pres=pres;
    hyperpro_struct(nfile).mpr.timer=pres_timer;
    hyperpro_struct(nfile).mpr.vel=vel;
    hyperpro_struct(nfile).mpr.tilt=tilt;
    hyperpro_struct(nfile).mpr.time=pres_timetag;
    hyperpro_struct(nfile).mpr.date=pres_datetag;
        
    if ~all(edd_indx==0)
        hyperpro_struct(nfile).edd.lambda=edd_lambda;
        hyperpro_struct(nfile).edd.data=edd;
        hyperpro_struct(nfile).edd.timer=edd_timer;
        hyperpro_struct(nfile).edd.time=edd_timetag;
        hyperpro_struct(nfile).edd.date=edd_datetag;
    end
    
    if ~all(lud_indx==0)
        hyperpro_struct(nfile).lud.lambda=lud_lambda;
        hyperpro_struct(nfile).lud.data=lud;
        hyperpro_struct(nfile).lud.timer=lud_timer;
        hyperpro_struct(nfile).lud.time=lud_timetag;
        hyperpro_struct(nfile).lud.date=lud_datetag;
    end

    hyperpro_struct(nfile).es.lambda=es_lambda;
    hyperpro_struct(nfile).es.data=es;
    hyperpro_struct(nfile).es.timer=es_timer;
    hyperpro_struct(nfile).es.time=es_timetag;
    hyperpro_struct(nfile).es.date=es_datetag;

    hyperpro_struct(nfile).esd.lambda=esd_lambda;
    hyperpro_struct(nfile).esd.data=esd;
    hyperpro_struct(nfile).esd.timer=esd_timer;
    hyperpro_struct(nfile).esd.time=esd_timetag;
    hyperpro_struct(nfile).esd.date=esd_datetag;
    
    if any(eu1d_indx)
        hyperpro_struct(nfile).eu1.lambda=eu1_lambda;
        hyperpro_struct(nfile).eu1.data=eu1;
        hyperpro_struct(nfile).eu1.timer=eu1_timer;
        hyperpro_struct(nfile).eu1.time=eu1_timetag;
        hyperpro_struct(nfile).eu1.date=eu1_datetag;

        hyperpro_struct(nfile).eu1d.lambda=eu1d_lambda;
        hyperpro_struct(nfile).eu1d.data=eu1d;
        hyperpro_struct(nfile).eu1d.timer=eu1d_timer;
        hyperpro_struct(nfile).eu1d.time=eu1d_timetag;
        hyperpro_struct(nfile).eu1d.date=eu1d_datetag;
    end
    
    if any(eu2d_indx)
        hyperpro_struct(nfile).eu2.lambda=eu2_lambda;
        hyperpro_struct(nfile).eu2.data=eu2;
        hyperpro_struct(nfile).eu2.timer=eu2_timer;
        hyperpro_struct(nfile).eu2.time=eu2_timetag;
        hyperpro_struct(nfile).eu2.date=eu2_datetag;

        hyperpro_struct(nfile).eu2d.lambda=eu2d_lambda;
        hyperpro_struct(nfile).eu2d.data=eu2d;
        hyperpro_struct(nfile).eu2d.timer=eu2d_timer;
        hyperpro_struct(nfile).eu2d.time=eu2d_timetag;
        hyperpro_struct(nfile).eu2d.date=eu2d_datetag;
    end
    
end

save([inputfolder,cruise_txt,'_all_hyperpro.mat'],'hyperpro_struct');

disp('Compiling *.mat files completed');

